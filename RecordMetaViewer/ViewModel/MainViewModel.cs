using Microsoft.Win32;
using RecordMetaViewer.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace RecordMetaViewer.ViewModel
{
    public class MainViewModel : ViewModelBase
    {
        public MainViewModel()
        {
            OpenFile();
        }

        public MainViewModel(string path)
        {
            //Helper.GetThumbnail(@"E:\1[アニメ類]\[Q4'18,Q4'18]逆転裁判\[20181006]日テレ１[[新]逆転裁判「失われた逆転」[字][デ]][lxsrc].ts");
            if (string.IsNullOrWhiteSpace(path))
            {
                MessageBox.Show($"{path}\n\nFile is not validity or generated by a later version. \n" +
                    "Please choose another *.Meta file.", "Error!", MessageBoxButton.OK, MessageBoxImage.Error);
                OpenFile();
                return;
            }
            var tmpFile = MetaFile.ReadFile(path);
            if (tmpFile is null)
            {
                MessageBox.Show($"{path}\n\nFile is not validity or generated by a later version. \n" +
                    "Please choose another *.Meta file.", "Error!", MessageBoxButton.OK, MessageBoxImage.Error);
                OpenFile();
                return;
            }
            else
            {
                this._path = path;
                this.baseData = tmpFile;
            }

            
        }

        private MetaFile baseData { get; set; } = null;

        public string Title => baseData?.Meta.name;

        public string Channel => baseData?.Meta.ChannelName;

        public BitmapImage ChannelLogo => GenerateImageSource(baseData?.mLogo);

        public bool HasLogo => !(ChannelLogo is null);

        public BitmapImage Thumbnail => GenerateImageSource(baseData?.mThumb);

        public string VideoLen => $"{baseData?.Meta.StartAt } {baseData?.Meta.Length}";

        public int Error => baseData?.Meta.errorCnt ?? 0;

        public int Drops => baseData?.Meta.dropCnt ?? 0;

        public int Scrambling => baseData?.Meta.scramblingCnt ?? 0;

        public ICommand OpenCmd => new CustomComand(OpenFile);

        public string Doc => $"{baseData?.Meta.description}\n{baseData?.Meta.extended}";

        public string AVInfo
        {
            get
            {
                if (baseData is null) return "";
                var V = $" {baseData.Meta.videoType},{Helper.GetVideoComponentTypeString(baseData.Meta.videoComponentType)} ";
                var A = $" {Helper.GetAudioComponentTypeString(baseData.Meta.audioComponentType)} " +
                    $"({Helper.GetAudioSamplingRateString(baseData.Meta.audioSamplingRate)}) ";
                return $"[{V}] + [{A}]";
            }
        }

        public string GenreInfo=> $"[ {baseData?.Meta.GenreString} - {baseData?.Meta.SubGenre} ]";

        private void OpenFile()
        {
            var dialog = new OpenFileDialog();
            dialog.CheckFileExists = true;
            dialog.Multiselect = false;
            dialog.Filter = "Record Meta(*.meta)|*.meta|All file(*.*)|*.*";
            if (dialog.ShowDialog() == true)
            {
                MetaFile tmpFile = MetaFile.ReadFile(dialog.FileName);
                if(tmpFile is null)
                {
                    MessageBox.Show($"{dialog.FileName}\n\nFile is not validity or generated by a later version. \n" +
                        "Please choose another *.Meta file.", "Error!",MessageBoxButton.OK,MessageBoxImage.Error);
                    OpenFile();
                    return;
                }
                this._path = dialog.FileName;
                this.baseData = tmpFile;
            }
        }

        public ICommand OpenVideoCmd => new CustomComand(OpenVideo);

        internal void OpenVideo()
        {
            if (File.Exists(this.FilePath))
            {
                Process.Start(this.FilePath);
            }
        }

        private string _path;

        public ICommand ReGenThumb => new CustomComand(GenThumb);

        internal void GenThumb()
        {
            if (baseData is null) return;
            if(File.Exists(Helper.FFMpegPath)&& File.Exists(this.FilePath))
            {
                baseData.ThumbImage = Helper.GetThumbnail(this.FilePath);
                NotifyPropertyChanged(nameof(this.Thumbnail));
            }
        }

        public string FilePath
        {
            get
            {
                if (baseData is null) return "";
                var ext = Path.GetExtension(baseData.Meta.filename);
                var ftmp = Path.GetFileNameWithoutExtension(_path);
                var ptmp = Path.GetDirectoryName(_path);
                var result = $"{ptmp}\\{ftmp}.ts";
                if (File.Exists(result))
                {
                    return result;
                }
                else
                {
                    return "ERR:Video File Not Found!!!";
                }
            }
        }

        private ImageSource GenerateImageSource(Image image)
        {
            if (image is null) return null;
            var ms = new MemoryStream();
            var bitmapImage = new BitmapImage();
            image.Save(ms, ImageFormat.Bmp);
            bitmapImage.BeginInit();
            ms.Seek(0, SeekOrigin.Begin);
            bitmapImage.StreamSource = ms;
            bitmapImage.EndInit();
            return bitmapImage;
        }

        public BitmapImage GenerateImageSource(byte[] bytes)
        {
            try
            {
                if (bytes is null) return null;
                if (bytes.Length <= 0) return null;
                MemoryStream stream = new MemoryStream(bytes);
                BitmapImage image = new BitmapImage();
                image.BeginInit();
                image.StreamSource = stream;
                image.EndInit();
                return image;
            }
            catch { 
                return null;    
            }
        }
    }
}
